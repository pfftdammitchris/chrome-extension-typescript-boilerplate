!function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,i=1,n=arguments.length;i<n;i++)for(var r in t=arguments[i])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};!function(){var e=document.createElement("div");function t(e){return'\n      <div class="chromez-modal-content">\n        <div style="width:100%;height:100%;overflow-y:auto;">\n          <div class="chromez-modal-content-header">\n            <h2>'+e.title+'</h2>\n            <span class="chromez-modal-close">&times;</span>\n          </div>\n          <div class="chromez-modal-content-body">\n            '+e.content+"\n          </div>\n        </div>\n      </div>\n    "}e.classList.add("chromez-modal"),document.body.appendChild(e)}();var r,l=(r={playlist:{page:{}}},{playlist:{page:{addHiddenElem:function(e,t,i){if(t){var n=t.hiddenElems,r=t.visibleElems;if(r.ids.includes(e)){var l=r.ids.indexOf(e);r.ids.splice(l,1)}e in r.items&&delete r.items[e],n.ids.includes(e)||n.ids.push(e),e in n.items||(n.items[e]=this.createPageObjElemObj(i))}else console.error("No page object! Please create a page object and pass it as arguments")},addVisibleElem:function(e,t,i){if(t){var n=t.hiddenElems,r=t.visibleElems;if(n.ids.includes(e)){var l=n.ids.indexOf(e);n.ids.splice(l,1)}e in n.items&&delete n.items[e],r.ids.includes(e)||r.ids.push(e),e in r.items||(r.items[e]=this.createPageObjElemObj(i))}else console.error("No page object! Please create a page object and pass it as arguments")},createPageObj:function(){return{hiddenElems:{ids:[],items:{}},visibleElems:{ids:[],items:{}}}},createPageObjElemObj:function(e){return n({elem:e.elem,details:e.details},e)},filter:function(e,t){switch(void 0===t&&(t={}),e){case"duration":var i=t.pageUrl,n=t.linkUrl,l=void 0===n?i:n;if(l)return l in r.playlist.page||(r.playlist.page[l]=this.createPageObj()),this.filterDuration(r.playlist.page[l],t);console.error("No link URL was found!")}},filterDuration:function(e,t){if(!document.getElementById("view-display-status")){var i=document.createElement("div");i.id="chromez-overlay",i.style.position="fixed",i.style.top="0",i.style.right="0",i.style.bottom="0",i.style.left="0",i.style.overflow="hidden",i.style.zIndex="1",i.style.pointerEvents="none";var n=document.createElement("div");n.id="chromez-overlay-stat",n.style.height="100%",n.style.display="flex",n.style.justifyContent="flex-end",n.style.alignItems="center",i.appendChild(n),document.body.appendChild(i),r(n)}function r(t){t&&(t.innerHTML='\n              <div style="padding:12px;position:relative;z-index:1;">\n                <div>Hidden: '+e.hiddenElems.ids.length+"</div>\n                <div>Visible: "+e.visibleElems.ids.length+'</div>\n                <div id="view-display-status" style="cursor:pointer;position:relative;z-index:99999">View</div>\n              </div>\n            ')}r(document.getElementById("chromez-overlay-stat"));for(var a=t.duration,o=a.min,s=(a.max,document.getElementById("videoPlaylist").querySelectorAll("li")),d=0;d<s.length;d++)c(s[d]);function c(t){var i,n,r,a,s,d,c,u,m,v,p,f,y,g={};if(t){i=t.dataset.id,n=t.getAttribute("_vkey");var h=t.querySelector("a");h&&(r=h.getAttribute("href"));var b=document.querySelector("div.thumbnail-info-wrapper");if(b){var E=b.querySelector(".title");if(E){var x=E.querySelector("a");x&&(a=x.getAttribute("href"))}var j=b.querySelector("div.videoUploaderBlock").querySelector("div.usernameWrap");if(j){var O=j.querySelector("a");O&&(g={username:O.innerText,url:O.getAttribute("href")})}var w=b.lastElementChild;if(w){var S=w.firstElementChild;S&&(m=S.innerText);var P=S&&S.nextElementSibling;if(P){var q=P.querySelector("div.value");q&&(v=q.innerText)}var T=w.lastElementChild;T&&(p=T.innerText)}}var z=t.querySelector("div.phimage");if(z){var C=z.getElementsByClassName("hd-thumbnail")[0];C&&(u=C.innerText);var k=z.querySelector("a.linkVideoThumb");k&&(d=k.dataset.title,s=k.dataset.relatedUrl);var _=z.querySelector("img");a&&(f=_.getAttribute("src"),y=_.dataset.thumb_url)}var L={id:i,vkey:n,href:r,relatedUrl:s,title:d,duration:c,quality:u,profile:g,views:m,upvotes:v,dateAdded:p,src:f,thumbUrl:y},M=z.getElementsByClassName("duration")[0];if(M&&M.innerText){var A=M.innerText.split(":")[0];if(A&&"number"==typeof(A=Number(A))){var N=l.playlist.page.createPageObjElemObj({elem:t,details:L});A<=o?(l.playlist.page.addHiddenElem(i,e,N),t.parentNode.removeChild(t)):l.playlist.page.addVisibleElem(i,e,N)}c=M.innerText}return L}}},getHiddenElems:function(e){return r.playlist.page[e].hiddenElems},getVisibleElems:function(e){return r.playlist.page[e].visibleElems}}}});chrome.runtime.onConnect.addListener((function(e){console.log("%cWe are connected to the background!","color:green;"),e.onMessage.addListener((function(e){console.log("%cport.onMessage: "+e,"color:blue")}))})),chrome.runtime.onMessage.addListener((function(e,t,i){if(console.log(e),"onload"!==e.type)switch(e.type){case"onload":chrome.runtime.connect();break;case"pornhub-playlist-videos-page-query":var r=n(n({},e),{duration:{min:10,max:null}}),a=function(){return l.playlist.page.filter("duration",r)};a(),window.removeEventListener("scroll",a),window.addEventListener("scroll",a);break}else i({acknowledged:!0})}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRlbnQvaW5kZXgudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjaHJvbWV6TW9kYWwiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRNb2RhbEh0bWwiLCJ0aXRsZSIsImNvbnRlbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJfc3RvcmUiLCJwaCIsInBsYXlsaXN0IiwicGFnZSIsImFkZEhpZGRlbkVsZW0iLCJpZCIsInBhZ2VPYmoiLCJvcHRpb25zIiwiaGlkZGVuRWxlbXMiLCJ2aXNpYmxlRWxlbXMiLCJpZHMiLCJpbmNsdWRlcyIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsIml0ZW1zIiwicHVzaCIsInRoaXMiLCJjcmVhdGVQYWdlT2JqRWxlbU9iaiIsImNvbnNvbGUiLCJlcnJvciIsImFkZFZpc2libGVFbGVtIiwiY3JlYXRlUGFnZU9iaiIsImVsZW0iLCJkZXRhaWxzIiwiZmlsdGVyIiwidHlwZSIsInBhZ2VVcmwiLCJsaW5rVXJsIiwiZmlsdGVyRHVyYXRpb24iLCJnZXRFbGVtZW50QnlJZCIsIm92ZXJsYXkiLCJzdHlsZSIsInBvc2l0aW9uIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0Iiwib3ZlcmZsb3ciLCJ6SW5kZXgiLCJwb2ludGVyRXZlbnRzIiwic3RhdCIsImhlaWdodCIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJkaXNwbGF5U3RhdHVzIiwiaW5uZXJIVE1MIiwibGVuZ3RoIiwiZHVyYXRpb24iLCJtaW4iLCJsaUVsZW1zTGlzdCIsIm1heCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwcm9jZXNzSXRlbSIsImxpRWxlbSIsInZrZXkiLCJocmVmIiwidXJsIiwicmVsYXRlZFVybCIsInF1YWxpdHkiLCJ2aWV3cyIsInVwdm90ZXMiLCJkYXRlQWRkZWQiLCJzcmMiLCJ0aHVtYlVybCIsInByb2ZpbGUiLCJkYXRhc2V0IiwiZ2V0QXR0cmlidXRlIiwiYW5jaG9yRWwiLCJxdWVyeVNlbGVjdG9yIiwidGh1bWJJbmZvV3JhcHBlckVsIiwidGl0bGVFbCIsImxpbmtFbCIsInVzZXJuYW1lRWwiLCJ1c2VyQW5jaG9yRWwiLCJ1c2VybmFtZSIsImlubmVyVGV4dCIsImRldGFpbHNCbG9jayIsImxhc3RFbGVtZW50Q2hpbGQiLCJ2aWV3c0VsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJyYXRpbmdzRWwiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJ1cHZvdGVzRWwiLCJhZGRlZEVsIiwicGhJbWFnZUVsIiwicXVhbGl0eUVsIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImFuY2hvckVsZW0iLCJpbWdFbCIsInRodW1iX3VybCIsImR1cmF0aW9uRWwiLCJyZXN1bHQiLCJzcGxpdCIsIk51bWJlciIsInBhZ2VPYmpFbGVtT2JqIiwibWluRHVyYXRpb24iLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJnZXRIaWRkZW5FbGVtcyIsImdldFZpc2libGVFbGVtcyIsImNocm9tZSIsInJ1bnRpbWUiLCJvbkNvbm5lY3QiLCJhZGRMaXN0ZW5lciIsInBvcnQiLCJsb2ciLCJvbk1lc3NhZ2UiLCJtc2ciLCJhY3Rpb24iLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJjb25uZWN0Iiwid2luZG93IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJhY2tub3dsZWRnZWQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFD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QTdGLFFBQVF3RixJQUFJRyxHQUVRLFdBQWhCQSxFQUFPcEYsS0FLWCxPQUFRb0YsRUFBT3BGLE1BQ2IsSUF6WVcsU0EwWVQ0RSxPQUFPQyxRQUFRVSxVQUNmLE1BQ0YsSUFBSyxxQ0FDSCxJQUFNLEVBQVUsRUFBSCxLQUNSSCxHQUFNLENBQ1Q3RCxTQUFVLENBQUVDLElBQUssR0FBSUUsSUFBSyxRQUd0QixFQUFVLFdBQU0sT0FBQW5ELEVBQUdDLFNBQVNDLEtBQUtzQixPQUFPLFdBQVksSUFFMUQsSUFJRXlGLE9BQU9DLG9CQUFvQixTQUFVLEdBQ3JDRCxPQUFPRSxpQkFBaUIsU0FBVSxHQUVwQyxXQXZCRkosRUFBYSxDQUFFSyxjQUFjIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLypcclxuICBNYW5pZmVzdCBndWlkZTpcclxuICAgIGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9tYW5pZmVzdFxyXG5cclxuICBNYW5pZmVzdCBwZXJtaXNzaW9uczogXHJcbiAgICBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvZGVjbGFyZV9wZXJtaXNzaW9uc1xyXG5cclxuICBjb250ZW50LXNjcmlwdHMgY2Fubm90IHVzZSBjaHJvbWUgQVBJJ3MgZXhjZXB0OlxyXG4gICAgY2hyb21lLmV4dGVuc2lvbiwgY2hyb21lLmkxOG4sIGNocm9tZS5ydW50aW1lLCBhbmQgY2hyb21lLnN0b3JhZ2VcclxuKi9cclxuXHJcbi8vIEFDVElPTiBUWVBFIENPTlNUQU5UU1xyXG5jb25zdCBPTkxPQUQgPSAnb25sb2FkJ1xyXG5cclxuLy8gR2VuZXJhdGVzIGNvbnRlbnQgdG8gcmVuZGVyIGluIHRoZSBtb2RhbFxyXG4vKipcclxuICogQHBhcmFtIHsgc3RyaW5nW10gfSBzcmNzIC0gQXJyYXkgb2YgYmFzZTY0IGRhdGEgZm9yIHRoZSBcInNyY1wiIGF0dHIgZm9yIDxpbWcgLz4gZWxlbWVudHNcclxuICogQHJldHVybiB7IHN0cmluZyB9XHJcbiAqL1xyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGVHYWxsZXJ5KHNyY3MpIHtcclxuICBsZXQgaHRtbCA9ICcnXHJcbiAgc3Jjcy5mb3JFYWNoKChzcmMpID0+IHtcclxuICAgIGh0bWwgKz0gYFxyXG4gICAgICA8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTttYXgtd2lkdGg6MzIwcHg7bWFyZ2luOjNweDttYXgtaGVpZ2h0OjM1MHB4O1wiPlxyXG4gICAgICAgIDxhIGhyZWY9XCIke3NyY31cIiB0YXJnZXQ9XCJfYmxhbmtcIj5cclxuICAgICAgICAgIDxpbWcgc3JjPVwiJHtzcmN9XCIgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO29iamVjdC1maXQ6Y292ZXI7XCI+PC9pbWc+XHJcbiAgICAgICAgPC9hPlxyXG4gICAgICA8L2Rpdj5gXHJcbiAgfSlcclxuICByZXR1cm4gaHRtbFxyXG59XHJcblxyXG5jb25zdCBtb2RhbCA9IChmdW5jdGlvbigpIHtcclxuICBjb25zdCBjaHJvbWV6TW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gIGNocm9tZXpNb2RhbC5jbGFzc0xpc3QuYWRkKCdjaHJvbWV6LW1vZGFsJylcclxuXHJcbiAgZnVuY3Rpb24gZ2V0TW9kYWxIdG1sKHsgdGl0bGUsIGNvbnRlbnQgfSkge1xyXG4gICAgcmV0dXJuIGBcclxuICAgICAgPGRpdiBjbGFzcz1cImNocm9tZXotbW9kYWwtY29udGVudFwiPlxyXG4gICAgICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO292ZXJmbG93LXk6YXV0bztcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaHJvbWV6LW1vZGFsLWNvbnRlbnQtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgIDxoMj4ke3RpdGxlfTwvaDI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2hyb21lei1tb2RhbC1jbG9zZVwiPiZ0aW1lczs8L3NwYW4+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjaHJvbWV6LW1vZGFsLWNvbnRlbnQtYm9keVwiPlxyXG4gICAgICAgICAgICAke2NvbnRlbnR9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgXHJcbiAgfVxyXG5cclxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNocm9tZXpNb2RhbClcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldEVsZW0oKSB7XHJcbiAgICAgIHJldHVybiBjaHJvbWV6TW9kYWxcclxuICAgIH0sXHJcbiAgICBnZXRNb2RhbEh0bWwsXHJcbiAgICBvcGVuKG9wdGlvbnMpIHtcclxuICAgICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCB7IHRpdGxlLCBjb250ZW50IH0gPSBvcHRpb25zXHJcbiAgICAgICAgY2hyb21lek1vZGFsLmlubmVySFRNTCA9IGdldE1vZGFsSHRtbCh7XHJcbiAgICAgICAgICB0aXRsZSxcclxuICAgICAgICAgIGNvbnRlbnQsXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgICBjaHJvbWV6TW9kYWwuc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xyXG4gICAgfSxcclxuICAgIGNsb3NlKCkge1xyXG4gICAgICBjaHJvbWV6TW9kYWwuaW5uZXJIVE1MID0gJydcclxuICAgICAgY2hyb21lek1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgIH0sXHJcbiAgfVxyXG59KSgpXHJcblxyXG5jb25zdCBwaCA9IChmdW5jdGlvbigpIHtcclxuICBjb25zdCBfc3RvcmUgPSB7XHJcbiAgICBwbGF5bGlzdDoge1xyXG4gICAgICBwYWdlOiB7fSxcclxuICAgIH0sXHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcGxheWxpc3Q6IHtcclxuICAgICAgLy8gVXRpbGl0aWVzIGZvciB3b3JraW5nIG9uIHBoIHBsYXlsaXN0IHBhZ2VzXHJcbiAgICAgIC8vIEV4YW1wbGUgbGluazogaHR0cHM6Ly9wb3JuaHVicHJlbWl1bS5jb20vcGxheWxpc3QvMjI0NTM4NzFcclxuICAgICAgcGFnZToge1xyXG4gICAgICAgIC8vIHBhZ2VPYmogPSB7IGhpZGRlbkVsZW1zLCB2aXNpYmxlRWxlbXMgfVxyXG4gICAgICAgIC8vIG9wdGlvbnMgPSB7IGVsZW0sIG1pbkR1cmF0aW9uLCBtYXhEdXJhdGlvbiwgdmFsdWUgfVxyXG4gICAgICAgIGFkZEhpZGRlbkVsZW0oaWQsIHBhZ2VPYmosIG9wdGlvbnMpIHtcclxuICAgICAgICAgIGlmIChwYWdlT2JqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaGlkZGVuRWxlbXMsIHZpc2libGVFbGVtcyB9ID0gcGFnZU9ialxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgZnJvbSB2aXNpYmxlIGVsZW1zIGlmIGl0cyBpbiB0aGVyZVxyXG4gICAgICAgICAgICBpZiAodmlzaWJsZUVsZW1zLmlkcy5pbmNsdWRlcyhpZCkpIHtcclxuICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHZpc2libGVFbGVtcy5pZHMuaW5kZXhPZihpZClcclxuICAgICAgICAgICAgICB2aXNpYmxlRWxlbXMuaWRzLnNwbGljZShpbmRleCwgMSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaWQgaW4gdmlzaWJsZUVsZW1zLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgZGVsZXRlIHZpc2libGVFbGVtcy5pdGVtc1tpZF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWhpZGRlbkVsZW1zLmlkcy5pbmNsdWRlcyhpZCkpIHtcclxuICAgICAgICAgICAgICBoaWRkZW5FbGVtcy5pZHMucHVzaChpZClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIShpZCBpbiBoaWRkZW5FbGVtcy5pdGVtcykpIHtcclxuICAgICAgICAgICAgICBoaWRkZW5FbGVtcy5pdGVtc1tpZF0gPSB0aGlzLmNyZWF0ZVBhZ2VPYmpFbGVtT2JqKG9wdGlvbnMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgICAgJ05vIHBhZ2Ugb2JqZWN0ISBQbGVhc2UgY3JlYXRlIGEgcGFnZSBvYmplY3QgYW5kIHBhc3MgaXQgYXMgYXJndW1lbnRzJyxcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gcGFnZU9iaiA9IHsgaGlkZGVuRWxlbXMsIHZpc2libGVFbGVtcyB9XHJcbiAgICAgICAgLy8gb3B0aW9ucyA9IHsgZWxlbSwgbWluRHVyYXRpb24sIG1heER1cmF0aW9uLCB2YWx1ZSB9XHJcbiAgICAgICAgYWRkVmlzaWJsZUVsZW0oaWQsIHBhZ2VPYmosIG9wdGlvbnMpIHtcclxuICAgICAgICAgIGlmIChwYWdlT2JqKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaGlkZGVuRWxlbXMsIHZpc2libGVFbGVtcyB9ID0gcGFnZU9ialxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgZnJvbSBoaWRkZW4gZWxlbXMgaWYgaXRzIGluIHRoZXJlXHJcbiAgICAgICAgICAgIGlmIChoaWRkZW5FbGVtcy5pZHMuaW5jbHVkZXMoaWQpKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBoaWRkZW5FbGVtcy5pZHMuaW5kZXhPZihpZClcclxuICAgICAgICAgICAgICBoaWRkZW5FbGVtcy5pZHMuc3BsaWNlKGluZGV4LCAxKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpZCBpbiBoaWRkZW5FbGVtcy5pdGVtcykge1xyXG4gICAgICAgICAgICAgIGRlbGV0ZSBoaWRkZW5FbGVtcy5pdGVtc1tpZF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXZpc2libGVFbGVtcy5pZHMuaW5jbHVkZXMoaWQpKSB7XHJcbiAgICAgICAgICAgICAgdmlzaWJsZUVsZW1zLmlkcy5wdXNoKGlkKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghKGlkIGluIHZpc2libGVFbGVtcy5pdGVtcykpIHtcclxuICAgICAgICAgICAgICB2aXNpYmxlRWxlbXMuaXRlbXNbaWRdID0gdGhpcy5jcmVhdGVQYWdlT2JqRWxlbU9iaihvcHRpb25zKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICAgICdObyBwYWdlIG9iamVjdCEgUGxlYXNlIGNyZWF0ZSBhIHBhZ2Ugb2JqZWN0IGFuZCBwYXNzIGl0IGFzIGFyZ3VtZW50cycsXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNyZWF0ZVBhZ2VPYmooKSB7XHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBoaWRkZW5FbGVtczogeyBpZHM6IFtdLCBpdGVtczoge30gfSxcclxuICAgICAgICAgICAgdmlzaWJsZUVsZW1zOiB7IGlkczogW10sIGl0ZW1zOiB7fSB9LFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JlYXRlUGFnZU9iakVsZW1PYmoob3B0aW9ucykge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZWxlbTogb3B0aW9ucy5lbGVtLFxyXG4gICAgICAgICAgICBkZXRhaWxzOiBvcHRpb25zLmRldGFpbHMsXHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaWx0ZXIodHlwZSwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnZHVyYXRpb24nOiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgeyBwYWdlVXJsLCBsaW5rVXJsID0gcGFnZVVybCB9ID0gb3B0aW9uc1xyXG4gICAgICAgICAgICAgIGlmIChsaW5rVXJsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShsaW5rVXJsIGluIF9zdG9yZS5wbGF5bGlzdC5wYWdlKSkge1xyXG4gICAgICAgICAgICAgICAgICBfc3RvcmUucGxheWxpc3QucGFnZVtsaW5rVXJsXSA9IHRoaXMuY3JlYXRlUGFnZU9iaigpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJEdXJhdGlvbihcclxuICAgICAgICAgICAgICAgICAgX3N0b3JlLnBsYXlsaXN0LnBhZ2VbbGlua1VybF0sXHJcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ05vIGxpbmsgVVJMIHdhcyBmb3VuZCEnKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaWx0ZXJEdXJhdGlvbihwYWdlT2JqLCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAvLyBzZXR1cFxyXG4gICAgICAgICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlldy1kaXNwbGF5LXN0YXR1cycpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxyXG4gICAgICAgICAgICBvdmVybGF5LmlkID0gJ2Nocm9tZXotb3ZlcmxheSdcclxuICAgICAgICAgICAgb3ZlcmxheS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCdcclxuICAgICAgICAgICAgb3ZlcmxheS5zdHlsZS50b3AgPSAnMCdcclxuICAgICAgICAgICAgb3ZlcmxheS5zdHlsZS5yaWdodCA9ICcwJ1xyXG4gICAgICAgICAgICBvdmVybGF5LnN0eWxlLmJvdHRvbSA9ICcwJ1xyXG4gICAgICAgICAgICBvdmVybGF5LnN0eWxlLmxlZnQgPSAnMCdcclxuICAgICAgICAgICAgb3ZlcmxheS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nXHJcbiAgICAgICAgICAgIG92ZXJsYXkuc3R5bGUuekluZGV4ID0gJzEnXHJcbiAgICAgICAgICAgIG92ZXJsYXkuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJ1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc3RhdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAgICAgICAgIHN0YXQuaWQgPSAnY2hyb21lei1vdmVybGF5LXN0YXQnXHJcbiAgICAgICAgICAgIHN0YXQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnXHJcbiAgICAgICAgICAgIHN0YXQuc3R5bGUuZGlzcGxheSA9ICdmbGV4J1xyXG4gICAgICAgICAgICBzdGF0LnN0eWxlLmp1c3RpZnlDb250ZW50ID0gJ2ZsZXgtZW5kJ1xyXG4gICAgICAgICAgICBzdGF0LnN0eWxlLmFsaWduSXRlbXMgPSAnY2VudGVyJ1xyXG5cclxuICAgICAgICAgICAgb3ZlcmxheS5hcHBlbmRDaGlsZChzdGF0KVxyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG92ZXJsYXkpXHJcblxyXG4gICAgICAgICAgICBkaXNwbGF5U3RhdHVzKHN0YXQpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBmdW5jdGlvbiBkaXNwbGF5U3RhdHVzKGVsZW0pIHtcclxuICAgICAgICAgICAgaWYgKGVsZW0pIHtcclxuICAgICAgICAgICAgICBlbGVtLmlubmVySFRNTCA9IGBcclxuICAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwicGFkZGluZzoxMnB4O3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MTtcIj5cclxuICAgICAgICAgICAgICAgIDxkaXY+SGlkZGVuOiAke3BhZ2VPYmouaGlkZGVuRWxlbXMuaWRzLmxlbmd0aH08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXY+VmlzaWJsZTogJHtwYWdlT2JqLnZpc2libGVFbGVtcy5pZHMubGVuZ3RofTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cInZpZXctZGlzcGxheS1zdGF0dXNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6OTk5OTlcIj5WaWV3PC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIGBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZGlzcGxheVN0YXR1cyhkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hyb21lei1vdmVybGF5LXN0YXQnKSlcclxuICAgICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgZHVyYXRpb246IHsgbWluOiBtaW5EdXJhdGlvbiwgbWF4OiBtYXhEdXJhdGlvbiB9LFxyXG4gICAgICAgICAgfSA9IG9wdGlvbnNcclxuXHJcbiAgICAgICAgICBjb25zdCB2aWRlb1BsYXlsaXN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvUGxheWxpc3QnKVxyXG4gICAgICAgICAgY29uc3QgbGlFbGVtc0xpc3QgPSB2aWRlb1BsYXlsaXN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJylcclxuXHJcbiAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgbGlFbGVtc0xpc3QubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxpRWxlbSA9IGxpRWxlbXNMaXN0W2luZGV4XVxyXG4gICAgICAgICAgICBwcm9jZXNzSXRlbShsaUVsZW0pXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gVVJMIG9mIHRhYiBzaG91bGQgYmUgdGhpcyBzaGFwZTogaHR0cHM6Ly9wb3JuaHVicHJlbWl1bS5jb20vcGxheWxpc3QvJHtwbGF5bGlzdElkfVxyXG4gICAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0l0ZW0obGlFbGVtKSB7XHJcbiAgICAgICAgICAgIGxldCBpZCxcclxuICAgICAgICAgICAgICB2a2V5LFxyXG4gICAgICAgICAgICAgIGhyZWYsXHJcbiAgICAgICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgICAgIHJlbGF0ZWRVcmwsXHJcbiAgICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgICAgZHVyYXRpb24sXHJcbiAgICAgICAgICAgICAgcXVhbGl0eSxcclxuICAgICAgICAgICAgICBwcm9maWxlID0ge30sXHJcbiAgICAgICAgICAgICAgdmlld3MsXHJcbiAgICAgICAgICAgICAgdXB2b3RlcyxcclxuICAgICAgICAgICAgICBkYXRlQWRkZWQsXHJcbiAgICAgICAgICAgICAgc3JjLFxyXG4gICAgICAgICAgICAgIHRodW1iVXJsXHJcblxyXG4gICAgICAgICAgICBpZiAoIWxpRWxlbSkgcmV0dXJuXHJcblxyXG4gICAgICAgICAgICBpZCA9IGxpRWxlbS5kYXRhc2V0LmlkXHJcbiAgICAgICAgICAgIHZrZXkgPSBsaUVsZW0uZ2V0QXR0cmlidXRlKCdfdmtleScpXHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbmNob3JFbCA9IGxpRWxlbS5xdWVyeVNlbGVjdG9yKCdhJylcclxuXHJcbiAgICAgICAgICAgIGlmIChhbmNob3JFbCkge1xyXG4gICAgICAgICAgICAgIGhyZWYgPSBhbmNob3JFbC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0aHVtYkluZm9XcmFwcGVyRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICAgICdkaXYudGh1bWJuYWlsLWluZm8td3JhcHBlcicsXHJcbiAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgICAgIGlmICh0aHVtYkluZm9XcmFwcGVyRWwpIHtcclxuICAgICAgICAgICAgICBjb25zdCB0aXRsZUVsID0gdGh1bWJJbmZvV3JhcHBlckVsLnF1ZXJ5U2VsZWN0b3IoJy50aXRsZScpXHJcblxyXG4gICAgICAgICAgICAgIGlmICh0aXRsZUVsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rRWwgPSB0aXRsZUVsLnF1ZXJ5U2VsZWN0b3IoJ2EnKVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpbmtFbCkge1xyXG4gICAgICAgICAgICAgICAgICB1cmwgPSBsaW5rRWwuZ2V0QXR0cmlidXRlKCdocmVmJylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGNvbnN0IHVwbG9hZGVyQmxvY2tFbCA9IHRodW1iSW5mb1dyYXBwZXJFbC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICAgICAgJ2Rpdi52aWRlb1VwbG9hZGVyQmxvY2snLFxyXG4gICAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgICAgICAgY29uc3QgdXNlcm5hbWVFbCA9IHVwbG9hZGVyQmxvY2tFbC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgICAgICAgJ2Rpdi51c2VybmFtZVdyYXAnLFxyXG4gICAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgICAgICAgaWYgKHVzZXJuYW1lRWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJBbmNob3JFbCA9IHVzZXJuYW1lRWwucXVlcnlTZWxlY3RvcignYScpXHJcbiAgICAgICAgICAgICAgICBpZiAodXNlckFuY2hvckVsKSB7XHJcbiAgICAgICAgICAgICAgICAgIHByb2ZpbGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJBbmNob3JFbC5pbm5lclRleHQsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1c2VyQW5jaG9yRWwuZ2V0QXR0cmlidXRlKCdocmVmJyksXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGNvbnN0IGRldGFpbHNCbG9jayA9IHRodW1iSW5mb1dyYXBwZXJFbC5sYXN0RWxlbWVudENoaWxkXHJcblxyXG4gICAgICAgICAgICAgIGlmIChkZXRhaWxzQmxvY2spIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXdzRWwgPSBkZXRhaWxzQmxvY2suZmlyc3RFbGVtZW50Q2hpbGRcclxuICAgICAgICAgICAgICAgIGlmICh2aWV3c0VsKSB2aWV3cyA9IHZpZXdzRWwuaW5uZXJUZXh0XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYXRpbmdzRWwgPSB2aWV3c0VsICYmIHZpZXdzRWwubmV4dEVsZW1lbnRTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICBpZiAocmF0aW5nc0VsKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHVwdm90ZXNFbCA9IHJhdGluZ3NFbC5xdWVyeVNlbGVjdG9yKCdkaXYudmFsdWUnKVxyXG4gICAgICAgICAgICAgICAgICBpZiAodXB2b3Rlc0VsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXB2b3RlcyA9IHVwdm90ZXNFbC5pbm5lclRleHRcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYWRkZWRFbCA9IGRldGFpbHNCbG9jay5sYXN0RWxlbWVudENoaWxkXHJcbiAgICAgICAgICAgICAgICBpZiAoYWRkZWRFbCkgZGF0ZUFkZGVkID0gYWRkZWRFbC5pbm5lclRleHRcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBoSW1hZ2VFbCA9IGxpRWxlbS5xdWVyeVNlbGVjdG9yKCdkaXYucGhpbWFnZScpXHJcblxyXG4gICAgICAgICAgICBpZiAocGhJbWFnZUVsKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgcXVhbGl0eUVsID0gcGhJbWFnZUVsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXHJcbiAgICAgICAgICAgICAgICAnaGQtdGh1bWJuYWlsJyxcclxuICAgICAgICAgICAgICApWzBdXHJcblxyXG4gICAgICAgICAgICAgIGlmIChxdWFsaXR5RWwpIHtcclxuICAgICAgICAgICAgICAgIHF1YWxpdHkgPSBxdWFsaXR5RWwuaW5uZXJUZXh0XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBjb25zdCBhbmNob3JFbGVtID0gcGhJbWFnZUVsLnF1ZXJ5U2VsZWN0b3IoJ2EubGlua1ZpZGVvVGh1bWInKVxyXG5cclxuICAgICAgICAgICAgICBpZiAoYW5jaG9yRWxlbSkge1xyXG4gICAgICAgICAgICAgICAgdGl0bGUgPSBhbmNob3JFbGVtLmRhdGFzZXQudGl0bGVcclxuICAgICAgICAgICAgICAgIHJlbGF0ZWRVcmwgPSBhbmNob3JFbGVtLmRhdGFzZXQucmVsYXRlZFVybFxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgY29uc3QgaW1nRWwgPSBwaEltYWdlRWwucXVlcnlTZWxlY3RvcignaW1nJylcclxuICAgICAgICAgICAgICBpZiAodXJsKSB7XHJcbiAgICAgICAgICAgICAgICBzcmMgPSBpbWdFbC5nZXRBdHRyaWJ1dGUoJ3NyYycpXHJcbiAgICAgICAgICAgICAgICB0aHVtYlVybCA9IGltZ0VsLmRhdGFzZXQudGh1bWJfdXJsXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkZXRhaWxzID0ge1xyXG4gICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICAgIHZrZXksXHJcbiAgICAgICAgICAgICAgaHJlZixcclxuICAgICAgICAgICAgICByZWxhdGVkVXJsLFxyXG4gICAgICAgICAgICAgIHRpdGxlLFxyXG4gICAgICAgICAgICAgIGR1cmF0aW9uLFxyXG4gICAgICAgICAgICAgIHF1YWxpdHksXHJcbiAgICAgICAgICAgICAgcHJvZmlsZSxcclxuICAgICAgICAgICAgICB2aWV3cyxcclxuICAgICAgICAgICAgICB1cHZvdGVzLFxyXG4gICAgICAgICAgICAgIGRhdGVBZGRlZCxcclxuICAgICAgICAgICAgICBzcmMsXHJcbiAgICAgICAgICAgICAgdGh1bWJVcmwsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGR1cmF0aW9uRWwgPSBwaEltYWdlRWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZHVyYXRpb24nKVswXVxyXG5cclxuICAgICAgICAgICAgaWYgKGR1cmF0aW9uRWwpIHtcclxuICAgICAgICAgICAgICBpZiAoZHVyYXRpb25FbC5pbm5lclRleHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSBkdXJhdGlvbkVsLmlubmVyVGV4dC5zcGxpdCgnOicpWzBdXHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IE51bWJlcihyZXN1bHQpXHJcblxyXG4gICAgICAgICAgICAgICAgICAvLyBUT0RPOiBhZGQgYW4gb3B0aW9uIGZvciBxdWVyeWluZyBoZXJlXHJcbiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VPYmpFbGVtT2JqID0gcGgucGxheWxpc3QucGFnZS5jcmVhdGVQYWdlT2JqRWxlbU9iaihcclxuICAgICAgICAgICAgICAgICAgICAgIHsgZWxlbTogbGlFbGVtLCBkZXRhaWxzIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0byBoaWRkZW4gZWxlbXNcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0IDw9IG1pbkR1cmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICBwaC5wbGF5bGlzdC5wYWdlLmFkZEhpZGRlbkVsZW0oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlT2JqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlT2JqRWxlbU9iaixcclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICAgIGxpRWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpRWxlbSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRvIHZpc2libGUgZWxlbXNcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHBoLnBsYXlsaXN0LnBhZ2UuYWRkVmlzaWJsZUVsZW0oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlT2JqLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlT2JqRWxlbU9iaixcclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gZHVyYXRpb25FbC5pbm5lclRleHRcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRldGFpbHNcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldEhpZGRlbkVsZW1zKGxpbmtVcmwpIHtcclxuICAgICAgICAgIHJldHVybiBfc3RvcmUucGxheWxpc3QucGFnZVtsaW5rVXJsXS5oaWRkZW5FbGVtc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0VmlzaWJsZUVsZW1zKGxpbmtVcmwpIHtcclxuICAgICAgICAgIHJldHVybiBfc3RvcmUucGxheWxpc3QucGFnZVtsaW5rVXJsXS52aXNpYmxlRWxlbXNcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfSxcclxuICB9XHJcbn0pKClcclxuXHJcbmNocm9tZS5ydW50aW1lLm9uQ29ubmVjdC5hZGRMaXN0ZW5lcigocG9ydCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCclY1dlIGFyZSBjb25uZWN0ZWQgdG8gdGhlIGJhY2tncm91bmQhJywgJ2NvbG9yOmdyZWVuOycpXHJcbiAgcG9ydC5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1zZykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coYCVjcG9ydC5vbk1lc3NhZ2U6ICR7bXNnfWAsICdjb2xvcjpibHVlJylcclxuICB9KVxyXG59KVxyXG5cclxuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKChhY3Rpb24sIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XHJcbiAgY29uc29sZS5sb2coYWN0aW9uKVxyXG5cclxuICBpZiAoYWN0aW9uLnR5cGUgPT09ICdvbmxvYWQnKSB7XHJcbiAgICBzZW5kUmVzcG9uc2UoeyBhY2tub3dsZWRnZWQ6IHRydWUgfSlcclxuICAgIHJldHVyblxyXG4gIH1cclxuXHJcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xyXG4gICAgY2FzZSBPTkxPQUQ6XHJcbiAgICAgIGNocm9tZS5ydW50aW1lLmNvbm5lY3QoKVxyXG4gICAgICBicmVha1xyXG4gICAgY2FzZSAncG9ybmh1Yi1wbGF5bGlzdC12aWRlb3MtcGFnZS1xdWVyeSc6IHtcclxuICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAuLi5hY3Rpb24sXHJcbiAgICAgICAgZHVyYXRpb246IHsgbWluOiAxMCwgbWF4OiBudWxsIH0sXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IG9uU3RhcnQgPSAoKSA9PiBwaC5wbGF5bGlzdC5wYWdlLmZpbHRlcignZHVyYXRpb24nLCBvcHRpb25zKVxyXG5cclxuICAgICAgb25TdGFydCgpXHJcbiAgICAgIHJlZ2lzdGVyTGlzdGVuZXJzKClcclxuXHJcbiAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblN0YXJ0KVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblN0YXJ0KVxyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrXHJcbiAgICB9XHJcbiAgICAvLyBjYXNlICdtZWdhcHJldmlldy1nZXQtcGFnZS1waG90b3MnOiB7XHJcbiAgICAvLyAgIGNvbnN0IG1vZGFsRWxlbSA9IG1vZGFsLmdldEVsZW0oKTtcclxuICAgIC8vICAgaWYgKG1vZGFsRWxlbS5zdHlsZS5kaXNwbGF5ICE9PSBcIm5vbmVcIikge1xyXG4gICAgLy8gICAgIG1vZGFsRWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAvLyAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgJC5hamF4KHtcclxuICAgIC8vICAgICAgIHVybDogYWN0aW9uLmxpbmtVcmwgfHwgYWN0aW9uLnVybCxcclxuICAgIC8vICAgICAgIHN1Y2Nlc3M6IGh0bWwgPT4ge1xyXG4gICAgLy8gICAgICAgICBjb25zdCAkaHRtbCA9ICQoaHRtbCk7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9ICQoXCIubWVnYUxpc3QtY29udGVudFwiLCAkaHRtbCk7XHJcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGNvbnRhaW5lcik7XHJcblxyXG4gICAgLy8gICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xyXG4gICAgLy8gICAgICAgICBjb25zdCBzcmNzID0gW107XHJcbiAgICAvLyAgICAgICAgICQoY29udGFpbmVyKVxyXG4gICAgLy8gICAgICAgICAgIC5maW5kKFwiYVwiKVxyXG4gICAgLy8gICAgICAgICAgIC5lYWNoKChpbmRleCwgZWxlbSkgPT4ge1xyXG4gICAgLy8gICAgICAgICAgICAgY29uc3QgJGVsZW0gPSAkKGVsZW0pO1xyXG4gICAgLy8gICAgICAgICAgICAgY29uc3Qgc3JjID0gJGVsZW0uZmluZChcImltZ1wiKS5hdHRyKFwic3JjXCIpO1xyXG4gICAgLy8gICAgICAgICAgICAgY29uc3QgZHVyYXRpb24gPSAkKFwiLnZpZGVvLXRodW1iLWRldGFpbHMgPiBzcGFuXCIsICRlbGVtKS50ZXh0KCk7XHJcbiAgICAvLyAgICAgICAgICAgICBjb25zdCB0aXRsZSA9ICQoXCIuZmlsZS1ibG9jay10aXRsZVwiKS50ZXh0KCk7XHJcbiAgICAvLyAgICAgICAgICAgICBzcmNzLnB1c2goc3JjKTtcclxuICAgIC8vICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG4gICAgLy8gICAgICAgICAgICAgICBzcmMsXHJcbiAgICAvLyAgICAgICAgICAgICAgIGR1cmF0aW9uLFxyXG4gICAgLy8gICAgICAgICAgICAgICB0aXRsZVxyXG4gICAgLy8gICAgICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgIGNvbnNvbGUubG9nKGl0ZW1zKTtcclxuICAgIC8vICAgICAgICAgY29uc3QgbW9kYWxFbGVtID0gJChtb2RhbC5nZXRFbGVtKCkpO1xyXG4gICAgLy8gICAgICAgICBjb25zdCBjb250YWluZXJIdG1sID0gbW9kYWwuZ2V0TW9kYWxIdG1sKHtcclxuICAgIC8vICAgICAgICAgICB0aXRsZTogYWN0aW9uLnRpdGxlIHx8IFwiUGhvdG9zXCIsXHJcbiAgICAvLyAgICAgICAgICAgY29udGVudDogZ2VuZXJhdGVHYWxsZXJ5KHNyY3MpXHJcbiAgICAvLyAgICAgICAgIH0pO1xyXG4gICAgLy8gICAgICAgICBtb2RhbEVsZW0uaHRtbChjb250YWluZXJIdG1sKTtcclxuICAgIC8vICAgICAgICAgY29uc3QgY2xvc2VCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFxyXG4gICAgLy8gICAgICAgICAgIFwiY2hyb21lei1tb2RhbC1jbG9zZVwiXHJcbiAgICAvLyAgICAgICAgIClbMF07XHJcbiAgICAvLyAgICAgICAgIGNsb3NlQnRuLm9uY2xpY2sgPSBtb2RhbC5jbG9zZTtcclxuICAgIC8vICAgICAgICAgbW9kYWwub3BlbigpO1xyXG4gICAgLy8gICAgICAgfVxyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyAgIGJyZWFrO1xyXG4gICAgLy8gfVxyXG4gICAgLy8gICBjb25zdCBtb2RhbEVsZW0gPSBtb2RhbC5nZXRFbGVtKCk7XHJcbiAgICAvLyAgIGlmIChtb2RhbEVsZW0uc3R5bGUuZGlzcGxheSAhPT0gXCJub25lXCIpIHtcclxuICAgIC8vICAgICBtb2RhbEVsZW0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgLy8gICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICQuYWpheCh7XHJcbiAgICAvLyAgICAgICB1cmw6IGFjdGlvbi5saW5rVXJsIHx8IGFjdGlvbi51cmwsXHJcbiAgICAvLyAgICAgICBzdWNjZXNzOiBodG1sID0+IHtcclxuICAgIC8vICAgICAgICAgY29uc3Qgcm9vdCA9ICQoaHRtbCk7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9ICQoXCIjcHJldmlld0ltYWdlc1wiLCByb290KTtcclxuICAgIC8vICAgICAgICAgY29uc3QgaW1nRWxlbXMgPSBjb250YWluZXIuZmluZChcImRpdi50aHVtYiA+IGEgPiBpbWdcIik7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IHNyY3MgPSBbXTtcclxuICAgIC8vICAgICAgICAgaW1nRWxlbXMuZWFjaCgoXywgZWwpID0+IHtcclxuICAgIC8vICAgICAgICAgICBjb25zdCBzcmMgPSAkKGVsKS5hdHRyKFwic3JjXCIpO1xyXG4gICAgLy8gICAgICAgICAgIGlmICghc3Jjcy5pbmNsdWRlcyhzcmMpKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBzcmNzLnB1c2goc3JjKTtcclxuICAgIC8vICAgICAgICAgICB9XHJcbiAgICAvLyAgICAgICAgIH0pO1xyXG4gICAgLy8gICAgICAgICBjb25zdCBtb2RhbEVsZW0gPSAkKG1vZGFsLmdldEVsZW0oKSk7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IGNvbnRhaW5lckh0bWwgPSBtb2RhbC5nZXRNb2RhbEh0bWwoe1xyXG4gICAgLy8gICAgICAgICAgIHRpdGxlOiBhY3Rpb24udGl0bGUgfHwgXCJQaG90b3NcIixcclxuICAgIC8vICAgICAgICAgICBjb250ZW50OiBnZW5lcmF0ZUdhbGxlcnkoc3JjcylcclxuICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgIG1vZGFsRWxlbS5odG1sKGNvbnRhaW5lckh0bWwpO1xyXG4gICAgLy8gICAgICAgICBjb25zdCBjbG9zZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXHJcbiAgICAvLyAgICAgICAgICAgXCJjaHJvbWV6LW1vZGFsLWNsb3NlXCJcclxuICAgIC8vICAgICAgICAgKVswXTtcclxuICAgIC8vICAgICAgICAgY2xvc2VCdG4ub25jbGljayA9IG1vZGFsLmNsb3NlO1xyXG4gICAgLy8gICAgICAgICBtb2RhbC5vcGVuKCk7XHJcbiAgICAvLyAgICAgICB9XHJcbiAgICAvLyAgICAgfSk7XHJcbiAgICAvLyAgIH1cclxuICAgIC8vICAgYnJlYWs7XHJcbiAgICAvLyB9XHJcbiAgICAvLyBjYXNlICdpbnN0YWdyYW0tcXVlcnktcG9zdC1waG90b3MnOiB7XHJcbiAgICAvLyAgIGlmICghYWN0aW9uLmxpbmtVcmwpIHtcclxuICAgIC8vICAgICByZXR1cm4gd2luZG93LmFsZXJ0KFxyXG4gICAgLy8gICAgICAgYFlvdSB0cmllZCB0byBmZXRjaCBhbiBpbnN0YWdyYW0gcG9zdCdzIHBob3RvcyBidXQgbm8gbGluayB3YXMgZ2l2ZW4uIEFjdGlvbjogJHtKU09OLnN0cmluZ2lmeShcclxuICAgIC8vICAgICAgICAgYWN0aW9uLFxyXG4gICAgLy8gICAgICAgICBudWxsLFxyXG4gICAgLy8gICAgICAgICAyXHJcbiAgICAvLyAgICAgICApfWBcclxuICAgIC8vICAgICApO1xyXG4gICAgLy8gICB9XHJcbiAgICAvLyAgICQuYWpheCh7XHJcbiAgICAvLyAgICAgdXJsOiBhY3Rpb24ubGlua1VybCxcclxuICAgIC8vICAgICBzdWNjZXNzOiBodG1sID0+IHtcclxuICAgIC8vICAgICAgIGNvbnN0ICRodG1sID0gJChodG1sKTtcclxuICAgIC8vICAgICAgIGNvbnN0IHsgcGhvdG9zIH0gPSBpbnN0YWdyYW0udXNlci5ob21lcGFnZS5nZXRQaG90b3NGcm9tUG9zdCgkaHRtbCk7XHJcbiAgICAvLyAgICAgICBjb25zdCBtb2RhbEVsZW0gPSAkKG1vZGFsLmdldEVsZW0oKSk7XHJcbiAgICAvLyAgICAgICBjb25zdCBzcmNzID0gcGhvdG9zLm1hcCgoeyBzcmMgfSkgPT4gc3JjKTtcclxuICAgIC8vICAgICAgIGNvbnN0IGNvbnRhaW5lckh0bWwgPSBtb2RhbC5nZXRNb2RhbEh0bWwoe1xyXG4gICAgLy8gICAgICAgICB0aXRsZTogXCJQaG90b3NcIixcclxuICAgIC8vICAgICAgICAgY29udGVudDogZ2VuZXJhdGVHYWxsZXJ5KHNyY3MpXHJcbiAgICAvLyAgICAgICB9KTtcclxuICAgIC8vICAgICAgIG1vZGFsRWxlbS5odG1sKGNvbnRhaW5lckh0bWwpO1xyXG4gICAgLy8gICAgICAgY29uc3QgY2xvc2VCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFxyXG4gICAgLy8gICAgICAgICBcImNocm9tZXotbW9kYWwtY2xvc2VcIlxyXG4gICAgLy8gICAgICAgKVswXTtcclxuICAgIC8vICAgICAgIGNsb3NlQnRuLm9uY2xpY2sgPSBtb2RhbC5jbG9zZTtcclxuICAgIC8vICAgICAgIG1vZGFsLm9wZW4oKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgIH0pO1xyXG4gICAgLy8gICAvLyBjb25zdCB4aHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXHJcbiAgICAvLyAgIC8vIHhodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gICAvLyAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gNCAmJiB0aGlzLnN0YXR1cyA9PSAyMDApIHtcclxuICAgIC8vICAgLy8gICAgIGNvbnN0IGh0bWwgPSB0aGlzLnJlc3BvbnNlVGV4dFxyXG4gICAgLy8gICAvLyAgICAgbW9kYWwub3Blbih7XHJcbiAgICAvLyAgIC8vICAgICAgIGNvbnRlbnQ6IGh0bWwsXHJcbiAgICAvLyAgIC8vICAgICB9KVxyXG4gICAgLy8gICAvLyAgICAgY29uc29sZS5sb2coaHRtbClcclxuICAgIC8vICAgLy8gICB9XHJcbiAgICAvLyAgIC8vIH1cclxuICAgIC8vICAgLy8geGh0dHAub3BlbignR0VUJywgYWN0aW9uLmxpbmtVcmwsIHRydWUpXHJcbiAgICAvLyAgIC8vIHhodHRwLnNlbmQoKVxyXG4gICAgLy8gICBicmVhaztcclxuICAgIC8vIH1cclxuICAgIC8vIGNhc2UgXCJkb3dubG9hZC1jYW5kaWRjcmVlcHMtdmlkZW9cIjoge1xyXG4gICAgLy8gICBpZiAoIWFjdGlvbi5saW5rVXJsKSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIHdpbmRvdy5hbGVydChcclxuICAgIC8vICAgICAgIGBZb3UgdHJpZWQgdG8gZmV0Y2ggYW4gaW5zdGFncmFtIHBvc3QncyBwaG90b3MgYnV0IG5vIGxpbmsgd2FzIGdpdmVuLiBBY3Rpb246ICR7SlNPTi5zdHJpbmdpZnkoXHJcbiAgICAvLyAgICAgICAgIGFjdGlvbixcclxuICAgIC8vICAgICAgICAgbnVsbCxcclxuICAgIC8vICAgICAgICAgMlxyXG4gICAgLy8gICAgICAgKX1gXHJcbiAgICAvLyAgICAgKTtcclxuICAgIC8vICAgfVxyXG4gICAgLy8gICBicmVhaztcclxuICAgIC8vIH1cclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICBicmVha1xyXG4gIH1cclxufSlcclxuXHJcbi8vIGNhc2UgJ3Bvcm5odWItZ2V0LXZpZGVvLWxpbmtzJzoge1xyXG4vLyAgIGNvbnN0IHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXHJcblxyXG4vLyAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuLy8gICAgIGxldCBtb2RhbEVsZW0sIG5vZGVzXHJcblxyXG4vLyAgICAgY29uc3QgZG9jID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhcclxuLy8gICAgICAgcmVxLnJlc3BvbnNlVGV4dCxcclxuLy8gICAgICAgJ3RleHQveG1sJyxcclxuLy8gICAgIClcclxuLy8gICAgIGNvbnN0IHRpdGxlID0gcG9ybmh1Yi5nZXRUaXRsZSgpXHJcbi8vICAgICBjb25zdCB0aHVtYm5haWwgPSBwb3JuaHViLmdldFRodW1ibmFpbCgpXHJcbi8vICAgICBsZXQgaXRlbXMgPSBwb3JuaHViLmdldE1lZGlhTGlua3MoZG9jKVxyXG4vLyAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoaXRlbXMpKVxyXG5cclxuLy8gICAgIC8vIEZhaWxlZFxyXG4vLyAgICAgaWYgKCFpdGVtcykge1xyXG4vLyAgICAgICB3aW5kb3cuYWxlcnQoYFRoZSBtZWRpYSBsaW5rcyBjb3VsZCBub3QgYmUgZXh0cmFjdGVkLiBgKVxyXG4vLyAgICAgICBjb25zb2xlLmxvZygnaXRlbXM6ICcsIGl0ZW1zKVxyXG4vLyAgICAgICBjb25zb2xlLmxvZygnZGlzcGF0Y2hlZCBhY3Rpb246ICcsIGFjdGlvbilcclxuLy8gICAgICAgcmV0dXJuXHJcbi8vICAgICB9XHJcbi8vICAgICAvLyBTdWNjZXNzXHJcbi8vICAgICBlbHNlIHtcclxuLy8gICAgICAgZnVuY3Rpb24gZm9ybWF0UmVkdWNlcihhY2MsIGl0ZW0pIHtcclxuLy8gICAgICAgICBpZiAoIWFjY1tpdGVtLmZvcm1hdF0pIHtcclxuLy8gICAgICAgICAgIGFjY1tpdGVtLmZvcm1hdF0gPSB7fVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICByZXR1cm4gYWNjXHJcbi8vICAgICAgIH1cclxuLy8gICAgICAgZnVuY3Rpb24gcXVhbGl0aWVzUmVkdWNlcihhY2MsIGl0ZW0pIHtcclxuLy8gICAgICAgICBpZiAoIWFjY1tpdGVtLmZvcm1hdF0pIHtcclxuLy8gICAgICAgICAgIGZvcm1hdFJlZHVjZXIoYWNjLCBpdGVtKVxyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtLnF1YWxpdHkpKSB7XHJcbi8vICAgICAgICAgICBpdGVtLnF1YWxpdHkuZm9yRWFjaCgocXVhbGl0eSkgPT4ge1xyXG4vLyAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYWNjW2l0ZW0uZm9ybWF0XVtxdWFsaXR5XSkpIHtcclxuLy8gICAgICAgICAgICAgICBhY2NbaXRlbS5mb3JtYXRdW3F1YWxpdHldID0gW2l0ZW1dXHJcbi8vICAgICAgICAgICAgIH0gZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgYWNjW2l0ZW0uZm9ybWF0XVtxdWFsaXR5XS5wdXNoKGl0ZW0pXHJcbi8vICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgIH0pXHJcbi8vICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhY2NbaXRlbS5mb3JtYXRdW2l0ZW0ucXVhbGl0eV0pKSB7XHJcbi8vICAgICAgICAgICAgIGFjY1tpdGVtLmZvcm1hdF1baXRlbS5xdWFsaXR5XSA9IFtpdGVtXVxyXG4vLyAgICAgICAgICAgfSBlbHNlIHtcclxuLy8gICAgICAgICAgICAgYWNjW2l0ZW0uZm9ybWF0XVtpdGVtLnF1YWxpdHldLnB1c2goaXRlbSlcclxuLy8gICAgICAgICAgIH1cclxuLy8gICAgICAgICB9XHJcbi8vICAgICAgICAgcmV0dXJuIGFjY1xyXG4vLyAgICAgICB9XHJcbi8vICAgICAgIC8vIGNvbnN0IGZvcm1hdHNXaXRoUXVhbGl0aWVzID0gZm9ybWF0cy5yZWR1Y2UoKCkpXHJcbi8vICAgICAgIC8vIFJlZHVjZSB0byBvYmogaW4gZm9ybWF0IGxpa2U6IHsgW2Zvcm1hdF06IEFycmF5LCAuLi5ldGMgfVxyXG4vLyAgICAgICBjb25zdCBjYWxsQWxsID0gKC4uLmZucykgPT4gKC4uLmFyZ3MpID0+XHJcbi8vICAgICAgICAgZm5zLnJlZHVjZSgoYWNjLCBmbikgPT4gZm4gJiYgZm4oLi4uYXJncyksICh4KSA9PiB4KVxyXG4vLyAgICAgICBjb25zdCB4Zm9ybSA9IGNhbGxBbGwoZm9ybWF0UmVkdWNlciwgcXVhbGl0aWVzUmVkdWNlcilcclxuLy8gICAgICAgaXRlbXMgPSBpdGVtcy5yZWR1Y2UoeGZvcm0sIHt9KVxyXG5cclxuLy8gICAgICAgbW9kYWxFbGVtID0gbW9kYWwuZ2V0RWxlbSgpXHJcblxyXG4vLyAgICAgICBmdW5jdGlvbiBnZXRRdWFsaXR5KHN0cikge1xyXG4vLyAgICAgICAgIHJldHVybiBgXHJcbi8vICAgICAgICAgICAgICAgPHN0cm9uZyBzdHlsZT1cImZvbnQtc3R5bGU6aXRhbGljO1wiPiR7c3RyfTwvc3Ryb25nPlxyXG4vLyAgICAgICAgICAgICBgXHJcbi8vICAgICAgIH1cclxuXHJcbi8vICAgICAgIC8vIGZvciBub3cgd2Ugd2lsbCBvbmx5IHN1cHBvcnQgbXA0XHJcbi8vICAgICAgIGNvbnN0IG1wNFZpZGVvcyA9IGl0ZW1zLm1wNFxyXG5cclxuLy8gICAgICAgaWYgKCFtcDRWaWRlb3MpIHtcclxuLy8gICAgICAgICB3aW5kb3cuYWxlcnQoJ05vIG1wNCBpdGVtcyBmb3VuZC4gQWJvcnRpbmcuLi4nKVxyXG4vLyAgICAgICAgIHJldHVyblxyXG4vLyAgICAgICB9XHJcblxyXG4vLyAgICAgICAvLyBIaWdoZXIgcXVhbGl0eSBvbmVzIHRvIHRoZSB0b3BcclxuLy8gICAgICAgY29uc3QgbXA0Rm9ybWF0cyA9IE9iamVjdC5rZXlzKG1wNFZpZGVvcykucmV2ZXJzZSgpXHJcblxyXG4vLyAgICAgICBjb25zdCBodG1sSXRlbXMgPSBtcDRGb3JtYXRzLnJlZHVjZSgoYWNjLCBmb3JtYXQpID0+IHtcclxuLy8gICAgICAgICBjb25zdCBpdGVtID0gbXA0VmlkZW9zW2Zvcm1hdF1bMF1cclxuLy8gICAgICAgICByZXR1cm4gYWNjLmNvbmNhdChgXHJcbi8vICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cInBhZGRpbmc6MTJweDtkaXNwbGF5OmlubGluZS1ibG9ja1wiPlxyXG4vLyAgICAgICAgICAgICAgICAgPGRpdj5cclxuLy8gICAgICAgICAgICAgICAgICAgPGRpdj5cclxuLy8gICAgICAgICAgICAgICAgICAgICBGb3JtYXQ6IDxzdHJvbmc+JHtpdGVtLmZvcm1hdH08L3N0cm9uZz5cclxuLy8gICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbi8vICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbi8vICAgICAgICAgICAgICAgICAgICAgUXVhbGl0eTogJHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoaXRlbS5xdWFsaXR5KVxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICA/IGl0ZW0ucXVhbGl0eS5tYXAoZ2V0UXVhbGl0eSlcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgOiBnZXRRdWFsaXR5KGl0ZW0ucXVhbGl0eSlcclxuLy8gICAgICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4vLyAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4vLyAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIke2l0ZW0udmlkZW9Vcmx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+RG93bmxvYWQ8L2E+XHJcbi8vICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4vLyAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbi8vICAgICAgICAgICAgICAgPC9kaXY+XHJcbi8vICAgICAgICAgICAgIGApXHJcbi8vICAgICAgIH0sICcnKVxyXG5cclxuLy8gICAgICAgbW9kYWxFbGVtLmh0bWwoYFxyXG4vLyAgICAgICAgICAgPGgyIHN0eWxlPVwiY29sb3I6I2ZmZjtmb250LXN0eWxlOml0YWxpYzttYXJnaW46MjBweCAwO1wiPiR7dGl0bGV9PC9oMj5cclxuLy8gICAgICAgICAgIDxkaXYgc3R5bGU9XCJwYWRkaW5nOjEycHg7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJVwiPlxyXG4vLyAgICAgICAgICAgICA8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJTtoZWlnaHQ6MTAwJVwiPlxyXG4vLyAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO21heC1oZWlnaHQ6NTAwcHg7b3ZlcmZsb3c6aGlkZGVuO1wiPlxyXG4vLyAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke3RodW1ibmFpbH1cIiBzdHlsZT1cIndpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7b2JqZWN0LWZpdDpjb3ZlclwiPjwvaW1nPlxyXG4vLyAgICAgICAgICAgICAgIDwvZGl2PlxyXG4vLyAgICAgICAgICAgICA8L2Rpdj5cclxuLy8gICAgICAgICAgICAgPGRpdj5cclxuLy8gICAgICAgICAgICAgICAke2h0bWxJdGVtc31cclxuLy8gICAgICAgICAgICAgPC9kaXY+XHJcbi8vICAgICAgICAgICA8L2Rpdj5cclxuLy8gICAgICAgICAgIGApXHJcbi8vICAgICAgIG1vZGFsLm9wZW4oKVxyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIGNvbnN0IHN0YXR1c0NvZGUgPSB0aGlzLnN0YXR1c1xyXG4vLyAgICAgY29uc3QgcmVhZHlTdGF0ZSA9IHRoaXMucmVhZHlTdGF0ZVxyXG4vLyAgICAgaWYgKHJlYWR5U3RhdGUgPT0gNCAmJiBzdGF0dXNDb2RlID09IDIwMCkge1xyXG4vLyAgICAgICBjb25zb2xlLmxvZyhyZXEucmVzcG9uc2VUZXh0KVxyXG4vLyAgICAgfVxyXG4vLyAgIH1cclxuLy8gICByZXEub3BlbignR0VUJywgYWN0aW9uLmxpbmtVcmwsIHRydWUpXHJcbi8vICAgcmVxLnNlbmQoKVxyXG4vLyAgIGJyZWFrXHJcbi8vIH1cclxuXHJcbi8vIGNvbnN0IG1vZGFsID0gKGZ1bmN0aW9uKCkge1xyXG4vLyAgIHRoaXMuZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbi8vICAgdGhpcy5lbGVtLmlkID0gJ3NuYWtlLW1vZGFsJ1xyXG4vLyAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lbGVtKVxyXG5cclxuLy8gICB0aGlzLm1vZGFsID0gJCgnI3NuYWtlLW1vZGFsJykuaXppTW9kYWwoe1xyXG4vLyAgICAgaGVhZGVyQ29sb3I6ICcjMzczNTQ2JyxcclxuLy8gICAgIGJhY2tncm91bmQ6ICcjMWYxZDJiJyxcclxuLy8gICAgIHJhZGl1czogOCxcclxuLy8gICAgIHdpZHRoOiAnOTAlJyxcclxuLy8gICAgIHppbmRleDogOTk5OTksXHJcbi8vICAgICBvbkNsb3NlZDogZnVuY3Rpb24oKSB7XHJcbi8vICAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JylcclxuLy8gICAgICAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdib2R5LWZpeGVkJylcclxuLy8gICAgIH0sXHJcbi8vICAgICBhcHBlbmRUbzogZmFsc2UsXHJcbi8vICAgICBhcHBlbmRUb092ZXJsYXk6IGZhbHNlLFxyXG4vLyAgIH0pXHJcblxyXG4vLyAgIGZ1bmN0aW9uIG9wZW4ob3B0aW9ucykge1xyXG4vLyAgICAgaWYgKG9wdGlvbnMudGl0bGUpIHRoaXMubW9kYWwuaXppTW9kYWwoJ3NldFRpdGxlJywgb3B0aW9ucy50aXRsZSlcclxuLy8gICAgIGlmIChvcHRpb25zLm1lc3NhZ2UpIHRoaXMubW9kYWwuaXppTW9kYWwoJ3NldFN1YnRpdGxlJywgb3B0aW9ucy5tZXNzYWdlKVxyXG4vLyAgICAgdGhpcy5tb2RhbC5pemlNb2RhbCgnb3BlbicpXHJcbi8vICAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpXHJcbi8vICAgICBib2R5LmNsYXNzTGlzdC5hZGQoJ2JvZHktZml4ZWQnKVxyXG4vLyAgIH1cclxuXHJcbi8vICAgZnVuY3Rpb24gc2V0SW5uZXJIdG1sKGh0bWwpIHtcclxuLy8gICAgIHRoaXMuZWxlbS5pbm5lckhUTUwgPSBodG1sXHJcbi8vICAgfVxyXG5cclxuLy8gICByZXR1cm4ge1xyXG4vLyAgICAgb3BlbjogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4vLyAgICAgICBpZiAoIW9wdGlvbnMpIHJldHVybiBmYWxzZVxyXG4vLyAgICAgICBvcGVuKG9wdGlvbnMpXHJcbi8vICAgICB9LFxyXG4vLyAgICAgc2V0SW5uZXJIdG1sOiBmdW5jdGlvbihodG1sKSB7XHJcbi8vICAgICAgIGlmICghaHRtbCkgcmV0dXJuIGZhbHNlXHJcbi8vICAgICAgIHNldElubmVySHRtbChodG1sKVxyXG4vLyAgICAgfSxcclxuLy8gICB9XHJcbi8vIH0pKClcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==